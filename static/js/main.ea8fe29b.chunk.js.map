{"version":3,"sources":["components/Directory/index.js","components/EmployeesTable/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["Directory","props","className","children","EmployeesTable","console","log","Table","striped","bordered","hover","variant","onClick","sortByName","sortByRole","employees","map","employee","src","image","alt","fullName","role","phoneNumber","email","Title","App","state","filteredList","search","handleInputChange","e","input","target","value","filter","toLowerCase","startsWith","setState","sortedNames","sort","a","b","sortedRoles","this","name","onChange","type","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wkJASeA,G,MANG,SAAAC,GACd,OACI,yBAAKC,UAAU,WAAWD,EAAME,Y,oBCgDzBC,MAhDf,SAAwBH,GAEpB,OADAI,QAAQC,IAAIC,KAER,kBAACA,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,SAClC,+BACI,4BACI,uCAGA,wBAAIC,QAASX,EAAMY,YAAnB,QACS,kBAAC,IAAD,OAET,wBAAID,QAASX,EAAMa,YAAnB,QACS,kBAAC,IAAD,OAET,4CAGA,+CAKR,+BACKb,EAAMc,UAAUC,KAAI,SAACC,GAAD,OACjB,4BACI,4BACI,yBAAKC,IAAKD,EAASE,MAAOC,IAAKH,EAASI,YAE5C,4BACKJ,EAASI,UAEd,4BACKJ,EAASK,MAEd,4BACKL,EAASM,aAEd,4BACKN,EAASO,WAhB1B,OCpBGC,EAND,SAAAxB,GACV,OACI,wBAAIC,UAAU,UAAUD,EAAME,WCmEvBuB,E,4MAhEXC,MAAQ,CACJZ,YACAa,aAAcb,EACdc,OAAQ,I,EAIZC,kBAAoB,SAAAC,GAChB,IAAMC,EAAQD,EAAEE,OAAOC,MAEjBN,EAAe,EAAKD,MAAMZ,UAAUoB,QAAO,SAAClB,GAAD,OACjDA,EAASI,SAASe,cAAcC,WAAWL,EAAMI,kBAGjD,EAAKE,SAAS,CAAEV,iBAEhB,EAAKU,SAAS,CACVT,OAAQG,K,EAKhBnB,WAAa,WACT,IAAI0B,EAAc,EAAKZ,MAAMC,aAAaY,MAAK,SAACC,EAAGC,GAAJ,OAC3CD,EAAEpB,SAAWqB,EAAErB,SAAW,GAAK,KAGnC,EAAKiB,SAAS,CAAEV,aAAcW,K,EAIlCzB,WAAa,WACT,IAAI6B,EAAc,EAAKhB,MAAMC,aAAaY,MAAK,SAACC,EAAEC,GAAH,OAC/CD,EAAEnB,KAAOoB,EAAEpB,KAAO,GAAK,KAGvB,EAAKgB,SAAS,CAAEV,aAAce,K,uDAI9B,OACI,kBAAC,EAAD,CAAWzC,UAAU,WACjB,kBAAC,EAAD,2BACA,0BAAMA,UAAU,aACZ,2BACAgC,MAAOU,KAAKjB,MAAME,OAClBgB,KAAK,SACLC,SAAUF,KAAKd,kBACfiB,KAAK,OACLC,YAAY,8BAGhB,kBAAC,EAAD,CACAjC,UAAW6B,KAAKjB,MAAMC,aACtBf,WAAY+B,KAAK/B,WACjBC,WAAY8B,KAAK9B,kB,GAxDfmC,aCMEC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.ea8fe29b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Directory.css'\r\n\r\nconst Directory = props => {\r\n    return(\r\n        <div className=\"wrapper\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Directory;","import React from 'react';\r\nimport Table from \"react-bootstrap/Table\"\r\nimport {FaSortUp} from \"react-icons/fa\"\r\nimport './EmployeesTable.css'\r\n\r\nfunction EmployeesTable(props) {\r\n    console.log(Table);\r\n    return(\r\n        <Table striped bordered hover variant=\"light\">\r\n            <thead>\r\n                <tr>\r\n                    <th>\r\n                        Picture\r\n                    </th>\r\n                    <th onClick={props.sortByName}>\r\n                        Name <FaSortUp />\r\n                    </th>\r\n                    <th onClick={props.sortByRole}>\r\n                        Role <FaSortUp />\r\n                    </th>\r\n                    <th>\r\n                        Phone Number\r\n                    </th>\r\n                    <th>\r\n                        Email Address\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.employees.map((employee) => (\r\n                    <tr>\r\n                        <td>\r\n                            <img src={employee.image} alt={employee.fullName}></img>\r\n                        </td>\r\n                        <td>\r\n                            {employee.fullName}\r\n                        </td>\r\n                        <td>\r\n                            {employee.role}\r\n                        </td>\r\n                        <td>\r\n                            {employee.phoneNumber}\r\n                        </td>\r\n                        <td>\r\n                            {employee.email}\r\n                        </td>\r\n                    </tr>\r\n                ))};\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default EmployeesTable;","import React from 'react';\r\n\r\nconst Title = props => {\r\n    return (\r\n        <h1 className=\"search\">{props.children}</h1>\r\n    )\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\r\nimport employees from './employeelist.json';\r\nimport Directory from './components/Directory';\r\nimport EmployeesTable from './components/EmployeesTable';\r\nimport Title from './components/Title';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        employees,\r\n        filteredList: employees,\r\n        search: \"\"\r\n    };\r\n\r\n    //Sets a variable to allow us to access employees that are filtered when we search, set to lowercase for consistency, and checking if it matches with the starting values of the employees in the directory\r\n    handleInputChange = e => {\r\n        const input = e.target.value;\r\n       \r\n        const filteredList = this.state.employees.filter((employee) => \r\n        employee.fullName.toLowerCase().startsWith(input.toLowerCase())\r\n        );\r\n\r\n        this.setState({ filteredList });\r\n\r\n        this.setState({\r\n            search: input\r\n        });\r\n    };\r\n\r\n    //Function to sort employees by name alphabetically\r\n    sortByName = () => {\r\n        let sortedNames = this.state.filteredList.sort((a, b) => \r\n            a.fullName > b.fullName ? 1 : -1\r\n        );\r\n\r\n        this.setState({ filteredList: sortedNames });\r\n    };\r\n\r\n    //Function to sort employees by role alphabetically\r\n    sortByRole = () => {\r\n        let sortedRoles = this.state.filteredList.sort((a,b) =>\r\n        a.role > b.role ? 1 : -1\r\n        );\r\n\r\n        this.setState({ filteredList: sortedRoles });\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Directory className=\"wrapper\">\r\n                <Title>Employee Directory</Title>\r\n                <form className=\"form mb-8\">\r\n                    <input\r\n                    value={this.state.search}\r\n                    name=\"search\"\r\n                    onChange={this.handleInputChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Find an employee by name\"\r\n                    />\r\n                </form>\r\n                <EmployeesTable\r\n                employees={this.state.filteredList}\r\n                sortByName={this.sortByName}\r\n                sortByRole={this.sortByRole}\r\n                />\r\n            </Directory>\r\n        )\r\n    \r\n    }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}